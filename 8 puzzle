from heapq import heappush, heappop
import itertools

class PuzzleNode:
    goal_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)  # 0 represents the empty space

    def __init__(self, state, parent=None, move=None, depth=0):
        self.state = tuple(state)
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = self.calculate_cost()

    def __lt__(self, other):
        return self.cost < other.cost

    def __eq__(self, other):
        return self.state == other.state

    def __hash__(self):
        return hash(self.state)

    def find_blank(self):
        return self.state.index(0)

    def calculate_cost(self):
        return self.depth + self.manhattan_distance()

    def manhattan_distance(self):
        distance = 0
        for i, tile in enumerate(self.state):
            if tile != 0:
                current_row, current_col = divmod(i, 3)
                goal_row, goal_col = divmod(tile - 1, 3)
                distance += abs(current_row - goal_row) + abs(current_col - goal_col)
        return distance

    def generate_children(self):
        blank_index = self.find_blank()
        blank_row, blank_col = divmod(blank_index, 3)
        possible_moves = []

        if blank_row > 0:
            possible_moves.append(-3)  # Move the blank space up
        if blank_row < 2:
            possible_moves.append(3)   # Move the blank space down
        if blank_col > 0:
            possible_moves.append(-1)  # Move the blank space left
        if blank_col < 2:
            possible_moves.append(1)   # Move the blank space right

        children = []
        for move in possible_moves:
            new_state = list(self.state)
            new_index = blank_index + move
            new_state[blank_index], new_state[new_index] = new_state[new_index], new_state[blank_index]
            children.append(PuzzleNode(new_state, parent=self, move=move, depth=self.depth + 1))

        return children

    def print_solution(self):
        solution = []
        current_node = self
        while current_node:
            solution.append(current_node.state)
            current_node = current_node.parent
        solution.reverse()

        for i, state in enumerate(solution):
            print(f"Move {i}:")
            print_board(state)
        print("Goal reached!")

def print_board(state):
    for i in range(0, 9, 3):
        print(state[i:i+3])
    print()

def solve_8_puzzle(initial_state):
    initial_node = PuzzleNode(initial_state)
    if initial_node.state == PuzzleNode.goal_state:
        print("Already in goal state.")
        return

    open_list = []
    closed_list = set()
    heappush(open_list, initial_node)

    while open_list:
        current_node = heappop(open_list)
        closed_list.add(current_node)

        if current_node.state == PuzzleNode.goal_state:
            current_node.print_solution()
            return

        for child in current_node.generate_children():
            if child not in closed_list:
                heappush(open_list, child)

    print("No solution found.")

# Example usage:
initial_state = [1, 2, 3, 4, 5, 6, 0, 7, 8]  # Initial state of the 8 puzzle
solve_8_puzzle(initial_state)
