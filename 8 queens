def is_safe(board, row, col):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i] == col:
            return False
        # Check diagonals: absolute difference between the current row and the row of the queen
        # should not equal the absolute difference between the current column and the column
        # of the queen
        if abs(i - row) == abs(board[i] - col):
            return False
    return True

def solve_queens(board, row):
    n = len(board)
    if row == n:  # All queens are placed successfully
        return True
    
    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col
            if solve_queens(board, row + 1):
                return True
            board[row] = -1  # Backtrack

    return False

def print_board(board):
    n = len(board)
    for row in range(n):
        line = ""
        for col in range(n):
            if board[row] == col:
                line += "Q "
            else:
                line += ". "
        print(line)
    print()

def solve_n_queens(n):
    board = [-1] * n
    if not solve_queens(board, 0):
        print("No solution exists")
    else:
        print_board(board)

# Example usage:
solve_n_queens(8)
