from collections import deque

def bfs(graph, start):
    # Initialize the queue with the starting node and visited set
    queue = deque([start])
    visited = set([start])

    while queue:
        # Dequeue a node from the front of the queue
        node = queue.popleft()
        print(node, end=" ")  # Process the node (e.g., print it)

        # Get all adjacent nodes (neighbors)
        for neighbor in graph[node]:
            if neighbor not in visited:
                # Mark the neighbor as visited and enqueue it
                visited.add(neighbor)
                queue.append(neighbor)

# Example graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Run BFS starting from node 'A'
bfs(graph, 'A')
